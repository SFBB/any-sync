// Code generated by MockGen. DO NOT EDIT.
// Source: messagereceiver_test.go
//
// Generated by this command:
//
//	mockgen -source messagereceiver_test.go -destination=mocks/mock_receiver.go -package=mocks github.com/anyproto/any-sync/coordinator/inboxclient MessageReceiverTest
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	coordinatorproto "github.com/anyproto/any-sync/coordinator/coordinatorproto"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageReceiverTest is a mock of MessageReceiverTest interface.
type MockMessageReceiverTest struct {
	ctrl     *gomock.Controller
	recorder *MockMessageReceiverTestMockRecorder
	isgomock struct{}
}

// MockMessageReceiverTestMockRecorder is the mock recorder for MockMessageReceiverTest.
type MockMessageReceiverTestMockRecorder struct {
	mock *MockMessageReceiverTest
}

// NewMockMessageReceiverTest creates a new mock instance.
func NewMockMessageReceiverTest(ctrl *gomock.Controller) *MockMessageReceiverTest {
	mock := &MockMessageReceiverTest{ctrl: ctrl}
	mock.recorder = &MockMessageReceiverTestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageReceiverTest) EXPECT() *MockMessageReceiverTestMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockMessageReceiverTest) Receive(event *coordinatorproto.NotifySubscribeEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Receive", event)
}

// Receive indicates an expected call of Receive.
func (mr *MockMessageReceiverTestMockRecorder) Receive(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockMessageReceiverTest)(nil).Receive), event)
}
